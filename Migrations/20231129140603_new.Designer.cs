// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyLibrary.Data;

#nullable disable

namespace MyLibrary.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231129140603_new")]
    partial class @new
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyLibrary.Models.Books", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AvailableCopies")
                        .HasColumnType("int");

                    b.Property<int>("CopiesInLibrary")
                        .HasColumnType("int");

                    b.Property<int>("CopiesOutLibrary")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EVersion")
                        .HasColumnType("bit");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LibraryAddDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("bookcategories")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "J.K Rowling",
                            AvailableCopies = 47,
                            CopiesInLibrary = 50,
                            CopiesOutLibrary = 3,
                            CreatedAt = new DateTime(2023, 11, 29, 15, 6, 3, 180, DateTimeKind.Local).AddTicks(5091),
                            Description = "Magic",
                            EVersion = true,
                            GenreId = 1,
                            ISBN = "975609876112",
                            ImageURL = "images/Fiction/drama/download.jpeg",
                            Language = "English",
                            LibraryAddDate = new DateTime(2023, 11, 29, 15, 6, 3, 180, DateTimeKind.Local).AddTicks(5075),
                            Pages = 780,
                            Publisher = "Bloomsbury",
                            Title = "Harry Potter and the Prisoner of Azkaban",
                            UpdatedAt = new DateTime(2023, 11, 29, 15, 6, 3, 180, DateTimeKind.Local).AddTicks(5095),
                            bookcategories = 0
                        });
                });

            modelBuilder.Entity("MyLibrary.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Sci_Fi"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Art"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Biography"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Sport"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Travel"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Blues"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Classic"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Folk"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Hip_Hop"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Rap"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Reggae"
                        },
                        new
                        {
                            Id = 15,
                            Name = " Rock"
                        });
                });

            modelBuilder.Entity("MyLibrary.Models.Books", b =>
                {
                    b.HasOne("MyLibrary.Models.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });
#pragma warning restore 612, 618
        }
    }
}
